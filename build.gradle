buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.14.0'
    }
}

plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'org.jetbrains.kotlin.plugin.allopen' version "$kotlin_version"
    id 'org.jetbrains.kotlin.plugin.noarg' version "$kotlin_version"
    id 'groovy'
    id 'jacoco'
    id 'org.springframework.boot' version "$spring_boot_version"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlin_version"
    id "io.spring.dependency-management" version "$spring_dependency_plugin_version"
    id 'org.jlleitschuh.gradle.ktlint' version "$ktlint_version"
    id 'com.gorylenko.gradle-git-properties' version "$git_properties_version"
}

mainClassName = "com.myretail.products.MyRetailApplicationKt"

version = "0.0.1"

distTar.version("")
jar.enabled = true

dependencies {
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-web"

    compile "org.springframework.boot:spring-boot-starter-data-mongodb"

    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"
    compile "io.springfox:springfox-boot-starter:${swagger_version}"
    compile "io.springfox:springfox-swagger-ui:${swagger_version}"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.1"
    compile "org.springframework.boot:spring-boot-starter-validation"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.codehaus.groovy:groovy-all:${groovy_version}"
    testCompile "org.spockframework:spock-core:${spock_version}"
    testCompile "org.spockframework:spock-spring:${spock_version}"
    testCompile 'com.github.tomakehurst:wiremock-jre8-standalone:2.23.2'
    testCompile 'com.opentable.components:otj-pg-embedded:0.13.1'
    testImplementation("net.javacrumbs.json-unit:json-unit:2.24.0")
}

configurations.all {
    exclude group: 'ch.qos.logback'
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
}

repositories {
    mavenLocal()
    jcenter()
    maven {
        url = "https://plugins.gradle.org/m2/"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
    integration {
        compileClasspath += (sourceSets.main.output + sourceSets.test.output)
        runtimeClasspath += (sourceSets.main.output + sourceSets.test.output)
    }
}

task integration(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    shouldRunAfter test
    maxHeapSize = '1G'
    testLogging {
        events "passed", "failed"
    }
}


tasks.withType(Test) {
    outputs.upToDateWhen { false }
    finalizedBy(jacocoTestReport)
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(JacocoReportBase) {
    executionData(test, integration)
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/MyRetailApplication**"
            ])
        }))
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        html.destination file("$buildDir/jacocoHtmlReport")
    }
    doLast {
        println("See Jacoco Test Coverage Report at: file://$buildDir/jacocoHtmlReport/index.html")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'
            limit {
                counter = 'BRANCH'
                minimum = 0.80
            }
        }
    }
}

ktlint {
    disabledRules = ["import-ordering"]
}

check.dependsOn(['integration', 'jacocoTestCoverageVerification', 'jacocoTestReport'])
